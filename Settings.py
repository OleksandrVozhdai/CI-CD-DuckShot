import os
import json
import pygame
import cv2
import sys
from Button import ImageButton

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º—ñ–∫—à–µ—Ä–∞ Pygame
pygame.mixer.init()

class Settings:
    def __init__(self, width, height, cap):
        self.SETTINGS_FILE = "settings.json"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å

        self.volume = 0.5  # –ó–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.crosshair_size = 20
        self.difficulty = "Medium"
        self.brightness = 0.8
        self.width = width
        self.height = height
        self.fullscreen = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∏–Ω–∞–µ–º –≤ –æ–∫–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        self.cap = cap
        self.sound_enabled = True

        # –ó–º–µ–Ω—å—à—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–ª–æ—Å–∫–∏ –≥—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ—Ä–∏–≥—É—î–º–æ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞
        self.slider_width = self.width // 3  # –ù–æ–≤–∞ —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ (–∫–æ—Ä–æ—Ç—à–∞)
        self.slider_x_start = (self.width - self.slider_width) // 2  # –¶–µ–Ω—Ç—Ä—É—î–º–æ –ø–æ–ª–æ—Å–∫—É
        self.slider_x = self.slider_x_start + int(self.volume * self.slider_width)
        self.slider_dragging = False

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –∑ —Ñ–∞–π–ª—É
        self.load_settings()

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ
        self.update_slider_position()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤—É–∫ –∫–Ω–æ–ø–æ–∫
        self.sound_path = "Assets/Sounds/click.mp3"
        self.sound_loaded = os.path.exists(self.sound_path)
        if self.sound_loaded:
            pygame.mixer.music.load(self.sound_path)
            pygame.mixer.music.set_volume(self.volume)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≥—É—á–Ω—ñ—Å—Ç—å
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {self.sound_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–≤—É–∫ –∫–Ω–æ–ø–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")

        # –ü–ª–∞—à–∫–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        self.settings_saved = False  # –ü–æ–∫–∞–∑—É—î, —á–∏ –±—É–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

    def save_settings(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ, —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–µ–∂–∏–º—É —É —Ñ–∞–π–ª"""
        try:
            settings_data = {
                "volume": self.volume,
                "width": self.width,
                "height": self.height,
                "fullscreen": self.fullscreen
            }
            with open(self.SETTINGS_FILE, "w") as file:
                json.dump(settings_data, file)
            self.settings_saved = True
            print(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {self.SETTINGS_FILE}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")

    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î. –Ø–∫—â–æ –Ω—ñ ‚Äì —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ñ–∞–π–ª"""
        if os.path.exists(self.SETTINGS_FILE):
            try:
                with open(self.SETTINGS_FILE, "r") as file:
                    data = json.load(file)
                    self.volume = data.get("volume", 0.5)
                    self.width = data.get("width", pygame.display.Info().current_w)
                    self.height = data.get("height", pygame.display.Info().current_h)
                    self.fullscreen = data.get("fullscreen", False)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False –¥–ª—è –æ–∫–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    print(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≥—É—á–Ω—ñ—Å—Ç—å: {self.volume * 100}%, —Ä–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: {self.width}x{self.height}, Fullscreen: {self.fullscreen}")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...")
            self.save_settings()  # –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ

    def update_slider_position(self):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –≥—É—á–Ω–æ—Å—Ç—ñ"""
        self.slider_width = self.width // 3
        self.slider_x_start = (self.width - self.slider_width) // 2
        self.slider_x = self.slider_x_start + int(self.volume * self.slider_width)

    def increase_volume(self):
        """–ó–±—ñ–ª—å—à—É—î –≥—É—á–Ω—ñ—Å—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–≤—É–∫"""
        self.volume = min(1.0, self.volume + 0.1)
        self.update_slider_position()
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        if self.sound_loaded:
            pygame.mixer.music.set_volume(self.volume)

    def decrease_volume(self):
        """–ó–º–µ–Ω—å—à—É—î –≥—É—á–Ω—ñ—Å—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–≤—É–∫"""
        self.volume = max(0.0, self.volume - 0.1)
        self.update_slider_position()
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        if self.sound_loaded:
            pygame.mixer.music.set_volume(self.volume)

    def get_volume(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –≥—É—á–Ω–æ—Å—Ç—ñ"""
        return self.volume

    def settings_menu(self, screen, font, draw_text_with_outline, main_menu):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        audio_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "", "Assets/Buttons/audio_button.png",
                                   "Assets/Buttons/audio_button_hover.png", "")
        video_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "", "Assets/Buttons/video_button.png",
                                   "Assets/Buttons/video_button_hover.png", "")
        back_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/exit_button.png",
                                  "Assets/Buttons/exit_button_hover.png", "")

        running = True
        while running:
            try:
                if self.cap:
                    ret, frame = self.cap.read()
                    if not ret:
                        self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                        continue
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame = cv2.resize(frame, (self.width, self.height), interpolation=cv2.INTER_AREA)
                    frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                    screen.blit(frame_surface, (0, 0))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
                screen.fill((0, 0, 0))

            draw_text_with_outline("Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, self.height * 0.2)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                        return screen
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if audio_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        screen = self.audio_settings(screen, font, draw_text_with_outline, main_menu)
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω–∞ –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –ø—ñ–¥–º–µ–Ω—é
                        if screen:
                            self.width, self.height = screen.get_width(), screen.get_height()
                            # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                            audio_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "", "Assets/Buttons/audio_button.png",
                                                       "Assets/Buttons/audio_button_hover.png", "")
                            video_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "", "Assets/Buttons/video_button.png",
                                                       "Assets/Buttons/video_button_hover.png", "")
                            back_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/exit_button.png",
                                                      "Assets/Buttons/exit_button_hover.png", "")
                    elif video_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        screen = self.video_settings(screen, font, draw_text_with_outline, main_menu)
                        if screen:
                            self.width, self.height = screen.get_width(), screen.get_height()
                            # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                            audio_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "", "Assets/Buttons/audio_button.png",
                                                       "Assets/Buttons/audio_button_hover.png", "")
                            video_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "", "Assets/Buttons/video_button.png",
                                                       "Assets/Buttons/video_button_hover.png", "")
                            back_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/exit_button.png",
                                                      "Assets/Buttons/exit_button_hover.png", "")
                    elif back_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return screen

                for btn in [audio_button, video_button, back_button]:
                    btn.handle_event(event)
                    if event.type == pygame.MOUSEBUTTONDOWN and btn.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()

            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∏—Ä–∏–Ω—ñ —Ç–∞ –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø–æ –≤–∏—Å–æ—Ç—ñ
            audio_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.35)
            video_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.45)
            back_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.55)

            for btn in [audio_button, video_button, back_button]:
                btn.check_hover(pygame.mouse.get_pos())
                btn.draw(screen)

            pygame.display.flip()

        return screen

    def audio_settings(self, screen, font, draw_text_with_outline, main_menu):
        # –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫: Mute, Save, Back
        mute_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "", "Assets/Buttons/mute_button.png",
                                  "Assets/Buttons/mute_button_hover.png", "")
        save_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "", "Assets/Buttons/save_button.png",
                                  "Assets/Buttons/save_button_hover.png", "")
        back_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/back_button.png",
                                  "Assets/Buttons/back_button_hover.png", "")

        running = True
        settings_changed = False
        previous_volume = self.volume
        self.settings_saved = False

        while running:
            try:
                if self.cap:
                    ret, frame = self.cap.read()
                    if not ret:
                        self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                        continue
                    # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –≤—ñ–¥–µ–æ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame = cv2.resize(frame, (self.width, self.height), interpolation=cv2.INTER_AREA)
                    frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                    screen.blit(frame_surface, (0, 0))
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ: {e}")
                screen.fill((0, 0, 0))

            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è 10% –≤—ñ–¥ –≤–µ—Ä—Ö—É —ñ 10% –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫
            draw_text_with_outline("Audio Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, self.height * 0.1)
            pygame.draw.rect(screen, (255, 255, 255), (self.slider_x_start, self.height * 0.15, self.slider_width, 8))  # –ü—ñ–¥–Ω—è–ª–∏ –ø–æ–≤–∑—É–Ω–æ–∫ –≤–∏—â–µ
            pygame.draw.rect(screen, (0, 255, 0), (self.slider_x_start, self.height * 0.15, int(self.volume * self.slider_width), 8))
            pygame.draw.circle(screen, (255, 255, 255), (self.slider_x, int(self.height * 0.15 + 4)), 10)
            draw_text_with_outline(f"Volume: {int(self.volume * 100)}%", font, (255, 255, 255), (0, 0, 0),
                                   self.width / 2, self.height * 0.2)  # –ü—ñ–¥–Ω—è–ª–∏ —Ç–µ–∫—Å—Ç –≤–∏—â–µ
            if self.settings_saved and not settings_changed:
                draw_text_with_outline("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", font, (0, 255, 0), (0, 0, 0), self.width / 2, self.height * 0.7)
            elif settings_changed:
                draw_text_with_outline("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", font, (255, 0, 0), (0, 0, 0), self.width / 2, self.height * 0.7)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        if settings_changed and not self.settings_saved:
                            self.volume = previous_volume
                            self.update_slider_position()
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(self.volume)
                        running = False
                        return screen
                    elif event.key == pygame.K_m:
                        if self.volume > 0.0:
                            self.sound_enabled = False
                            self.volume = 0.0
                            self.slider_x = self.slider_x_start
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(0.0)
                            settings_changed = True
                            self.settings_saved = False

                if event.type == pygame.MOUSEBUTTONDOWN:
                    if abs(event.pos[0] - self.slider_x) <= 10 and (self.height * 0.15 - 4) <= event.pos[1] <= (self.height * 0.15 + 12):  # –û–Ω–æ–≤–∏–ª–∏ –≤–∏—Å–æ—Ç—É –¥–ª—è –ø–æ–≤–∑—É–Ω–∫–∞
                        self.slider_dragging = True
                    elif mute_button.rect.collidepoint(event.pos):
                        if self.volume > 0.0:
                            self.sound_enabled = False
                            self.volume = 0.0
                            self.slider_x = self.slider_x_start
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(0.0)
                            settings_changed = True
                            self.settings_saved = False
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                    elif save_button.rect.collidepoint(event.pos):
                        self.save_settings()
                        previous_volume = self.volume
                        settings_changed = False
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                    elif back_button.rect.collidepoint(event.pos):
                        if settings_changed and not self.settings_saved:
                            self.volume = previous_volume
                            self.update_slider_position()
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(self.volume)
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return screen

                if event.type == pygame.MOUSEBUTTONUP:
                    self.slider_dragging = False

                if event.type == pygame.MOUSEMOTION and self.slider_dragging:
                    self.slider_x = max(self.slider_x_start, min(event.pos[0], self.slider_x_start + self.slider_width))
                    self.volume = (self.slider_x - self.slider_x_start) / self.slider_width
                    if self.sound_loaded:
                        pygame.mixer.music.set_volume(self.volume)
                    settings_changed = True
                    self.settings_saved = False

                if event.type == pygame.VIDEORESIZE:
                    if not self.fullscreen:  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É —Ç—ñ–ª—å–∫–∏ –≤ –≤—ñ–∫–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
                        self.width, self.height = event.w, event.h
                        self.slider_width = self.width // 3
                        self.slider_x_start = (self.width - self.slider_width) // 2
                        self.update_slider_position()
                        screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
                        # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É
                        mute_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "", "Assets/Buttons/mute_button.png",
                                                  "Assets/Buttons/mute_button_hover.png", "")
                        save_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "", "Assets/Buttons/save_button.png",
                                                  "Assets/Buttons/save_button_hover.png", "")
                        back_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/back_button.png",
                                                  "Assets/Buttons/back_button_hover.png", "")

                mute_button.handle_event(event)
                save_button.handle_event(event)
                back_button.handle_event(event)

            mute_button.check_hover(pygame.mouse.get_pos())
            mute_button.draw(screen)
            save_button.check_hover(pygame.mouse.get_pos())
            save_button.draw(screen)
            back_button.check_hover(pygame.mouse.get_pos())
            back_button.draw(screen)

            pygame.display.flip()

        return screen

    def video_settings(self, screen, font, draw_text_with_outline, main_menu):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: –∑–º—ñ–Ω–∞ –ø–æ—Ä—è–¥–∫—É –∫–Ω–æ–ø–æ–∫ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ó–±–µ—Ä–µ–≥—Ç–∏" """
        fullscreen_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "",
                                        "Assets/Buttons/fullscreen_button.png",
                                        "Assets/Buttons/fullscreen_button_hover.png", "")  # –ü–µ—Ä—à–∞ –∫–Ω–æ–ø–∫–∞ - Fullscreen
        resolution_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "",
                                        "Assets/Buttons/resolution_button.png",
                                        "Assets/Buttons/resolution_button_hover.png", "")  # –î—Ä—É–≥–∞ –∫–Ω–æ–ø–∫–∞ - Resolution
        save_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "", "Assets/Buttons/save_button.png",
                                  "Assets/Buttons/save_button_hover.png", "")  # –¢—Ä–µ—Ç—è –∫–Ω–æ–ø–∫–∞ - Save
        back_button = ImageButton((self.width - 252) / 2, self.height * 0.65, 252, 74, "", "Assets/Buttons/back_button.png",
                                  "Assets/Buttons/back_button_hover.png", "")  # –ß–µ—Ç–≤–µ—Ä—Ç–∞ –∫–Ω–æ–ø–∫–∞ - Back

        running = True
        while running:
            try:
                if self.cap:
                    ret, frame = self.cap.read()
                    if not ret:
                        self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                        continue
                    # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –≤—ñ–¥–µ–æ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame = cv2.resize(frame, (self.width, self.height), interpolation=cv2.INTER_AREA)
                    frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                    screen.blit(frame_surface, (0, 0))
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–µ–æ: {e}")
                screen.fill((0, 0, 0))

            # –í–∏—Ä—ñ–≤–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º —à—Ä–∏—Ñ—Ç–æ–º —ñ –ø–æ–∑–∏—Ü—ñ—î—é
            draw_text_with_outline("Video Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, self.height * 0.1)
            draw_text_with_outline(f"Resolution: {self.width}x{self.height}", font, (255, 255, 255), (0, 0, 0), self.width / 2, self.height * 0.2)
            fullscreen_text = "Fullscreen: ON" if self.fullscreen else "Fullscreen: OFF"
            draw_text_with_outline(fullscreen_text, font, (255, 255, 255), (0, 0, 0), self.width / 2, self.height * 0.3)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                        return screen
                    elif event.key == pygame.K_F11:  # –ì–∞—Ä—è—á–∞ –∫–ª–∞–≤—ñ—à–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
                        screen = self.toggle_fullscreen(screen)
                        if screen:
                            self.width, self.height = screen.get_width(), screen.get_height()
                            # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É
                            fullscreen_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "",
                                                            "Assets/Buttons/fullscreen_button.png",
                                                            "Assets/Buttons/fullscreen_button_hover.png", "")
                            resolution_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "",
                                                            "Assets/Buttons/resolution_button.png",
                                                            "Assets/Buttons/resolution_button_hover.png", "")
                            save_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "",
                                                      "Assets/Buttons/save_button.png",
                                                      "Assets/Buttons/save_button_hover.png", "")
                            back_button = ImageButton((self.width - 252) / 2, self.height * 0.65, 252, 74, "",
                                                      "Assets/Buttons/back_button.png",
                                                      "Assets/Buttons/back_button_hover.png", "")
                if event.type == pygame.VIDEORESIZE:
                    if not self.fullscreen:  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É —Ç—ñ–ª—å–∫–∏ –≤ –≤—ñ–∫–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
                        self.width, self.height = event.w, event.h
                        self.slider_width = self.width // 3
                        self.slider_x_start = (self.width - self.slider_width) // 2
                        self.update_slider_position()
                        screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
                        # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É
                        fullscreen_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "",
                                                        "Assets/Buttons/fullscreen_button.png",
                                                        "Assets/Buttons/fullscreen_button_hover.png", "")
                        resolution_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "",
                                                        "Assets/Buttons/resolution_button.png",
                                                        "Assets/Buttons/resolution_button_hover.png", "")
                        save_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "",
                                                  "Assets/Buttons/save_button.png",
                                                  "Assets/Buttons/save_button_hover.png", "")
                        back_button = ImageButton((self.width - 252) / 2, self.height * 0.65, 252, 74, "",
                                                  "Assets/Buttons/back_button.png",
                                                  "Assets/Buttons/back_button_hover.png", "")
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if resolution_button.rect.collidepoint(event.pos):  # –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –≤ –æ–±–æ—Ö —Ä–µ–∂–∏–º–∞—Ö
                        screen = self.change_resolution(screen)
                        if screen:
                            self.width, self.height = screen.get_width(), screen.get_height()
                            # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
                            fullscreen_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "",
                                                            "Assets/Buttons/fullscreen_button.png",
                                                            "Assets/Buttons/fullscreen_button_hover.png", "")
                            resolution_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "",
                                                            "Assets/Buttons/resolution_button.png",
                                                            "Assets/Buttons/resolution_button_hover.png", "")
                            save_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "",
                                                      "Assets/Buttons/save_button.png",
                                                      "Assets/Buttons/save_button_hover.png", "")
                            back_button = ImageButton((self.width - 252) / 2, self.height * 0.65, 252, 74, "",
                                                      "Assets/Buttons/back_button.png",
                                                      "Assets/Buttons/back_button_hover.png", "")
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                    elif fullscreen_button.rect.collidepoint(event.pos):
                        screen = self.toggle_fullscreen(screen)
                        if screen:
                            self.width, self.height = screen.get_width(), screen.get_height()
                            # –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É
                            fullscreen_button = ImageButton((self.width - 252) / 2, self.height * 0.35, 252, 74, "",
                                                            "Assets/Buttons/fullscreen_button.png",
                                                            "Assets/Buttons/fullscreen_button_hover.png", "")
                            resolution_button = ImageButton((self.width - 252) / 2, self.height * 0.45, 252, 74, "",
                                                            "Assets/Buttons/resolution_button.png",
                                                            "Assets/Buttons/resolution_button_hover.png", "")
                            save_button = ImageButton((self.width - 252) / 2, self.height * 0.55, 252, 74, "",
                                                      "Assets/Buttons/save_button.png",
                                                      "Assets/Buttons/save_button_hover.png", "")
                            back_button = ImageButton((self.width - 252) / 2, self.height * 0.65, 252, 74, "",
                                                      "Assets/Buttons/back_button.png",
                                                      "Assets/Buttons/back_button_hover.png", "")
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                    elif save_button.rect.collidepoint(event.pos):
                        self.save_settings()
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                    elif back_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return screen

                for btn in [fullscreen_button, resolution_button, save_button, back_button]:
                    btn.handle_event(event)

            # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∏—Ä–∏–Ω—ñ —Ç–∞ –º–∞—Å—à—Ç–∞–±—É—î–º–æ –ø–æ –≤–∏—Å–æ—Ç—ñ
            fullscreen_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.35)
            resolution_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.45)
            save_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.55)
            back_button.rect.topleft = ((self.width - 252) / 2, self.height * 0.65)

            for btn in [fullscreen_button, resolution_button, save_button, back_button]:
                btn.check_hover(pygame.mouse.get_pos())
                btn.draw(screen)

            pygame.display.flip()

        return screen

    def toggle_fullscreen(self, screen):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –º—ñ–∂ –∑–≤–∏—á–∞–π–Ω–∏–º —ñ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–º —Ä–µ–∂–∏–º–æ–º, –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞ —Ç—ñ–ª—å–∫–∏ –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        self.fullscreen = not self.fullscreen
        if self.fullscreen:
            # –£ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∫–∞–∑–∞–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è, –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞
            resolutions = [(3440, 1440), (2752, 1152), (1920, 1080), (1280, 720), (1024, 768)]
            if (self.width, self.height) in resolutions:
                screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
            else:
                # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –≤ —Å–ø–∏—Å–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞
                info = pygame.display.Info()
                self.width, self.height = info.current_w, info.current_h
                screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
        else:
            # –£ –≤—ñ–∫–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∫–∞–∑–∞–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫ —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞
            screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—ñ–∫–Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î —Ä–æ–∑–º—ñ—Ä –º–æ–Ω—ñ—Ç–æ—Ä–∞
            info = pygame.display.Info()
            if self.width > info.current_w or self.height > info.current_h:
                self.width, self.height = min(self.width, info.current_w), min(self.height, info.current_h)
                screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
        self.slider_width = self.width // 3
        self.slider_x_start = (self.width - self.slider_width) // 2
        self.update_slider_position()
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        return screen

    def change_resolution(self, screen):
        """–ó–º—ñ–Ω—é—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –≤ –æ–±–æ—Ö —Ä–µ–∂–∏–º–∞—Ö, –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞ —Ç—ñ–ª—å–∫–∏ –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        resolutions = [(3440, 1440), (2752, 1152), (1920, 1080), (1280, 720), (1024, 768)]
        current_resolution = (self.width, self.height)
        index = resolutions.index(current_resolution) if current_resolution in resolutions else 0
        new_resolution = resolutions[(index + 1) % len(resolutions)]
        self.width, self.height = new_resolution
        self.slider_width = self.width // 3
        self.slider_x_start = (self.width - self.slider_width) // 2
        self.update_slider_position()
        if self.fullscreen:
            # –£ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∫–∞–∑–∞–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è, –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞
            screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
        else:
            # –£ –≤—ñ–∫–æ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∫–∞–∑–∞–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫ —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞
            screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—ñ–∫–Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î —Ä–æ–∑–º—ñ—Ä –º–æ–Ω—ñ—Ç–æ—Ä–∞
            info = pygame.display.Info()
            if self.width > info.current_w or self.height > info.current_h:
                self.width, self.height = min(self.width, info.current_w), min(self.height, info.current_h)
                screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        print(f"üîÑ –ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –Ω–∞: {new_resolution[0]}x{new_resolution[1]}")
        return screen