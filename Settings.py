import os
import json
import pygame
import cv2
from Button import ImageButton

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º—ñ–∫—à–µ—Ä–∞ Pygame
pygame.mixer.init()

class Settings:
    def __init__(self, width, height, cap):
        self.SETTINGS_FILE = "settings.json"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å

        self.volume = 0.5  # –ó–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.crosshair_size = 20
        self.difficulty = "Medium"
        self.brightness = 0.8
        self.width = width
        self.height = height
        self.fullscreen = False
        self.cap = cap
        self.sound_enabled = True

        # –ó–º–µ–Ω—à—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–ª–æ—Å–∫–∏ –≥—É—á–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ—Ä–∏–≥—É—î–º–æ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞
        self.slider_width = self.width // 3  # –ù–æ–≤–∞ —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ (–∫–æ—Ä–æ—Ç—à–∞)
        self.slider_x_start = (self.width - self.slider_width) // 2  # –¶–µ–Ω—Ç—Ä—É—î–º–æ –ø–æ–ª–æ—Å–∫—É
        self.slider_x = self.slider_x_start + int(self.volume * self.slider_width)
        self.slider_dragging = False

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –∑ —Ñ–∞–π–ª—É
        self.load_settings()

        # **–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ**
        self.update_slider_position()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤—É–∫ –∫–Ω–æ–ø–æ–∫
        self.sound_path = "Assets/Sounds/click.mp3"
        self.sound_loaded = os.path.exists(self.sound_path)
        if self.sound_loaded:
            pygame.mixer.music.load(self.sound_path)
            pygame.mixer.music.set_volume(self.volume)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≥—É—á–Ω—ñ—Å—Ç—å
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {self.sound_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–≤—É–∫ –∫–Ω–æ–ø–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")

        # –ü–ª–∞—à–∫–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        self.settings_saved = False  # –ü–æ–∫–∞–∑—É—î, —á–∏ –±—É–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

    def save_settings(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ —É —Ñ–∞–π–ª"""
        try:
            with open(self.SETTINGS_FILE, "w") as file:
                json.dump({"volume": self.volume}, file)
            self.settings_saved = True
            print(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {self.SETTINGS_FILE}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")

    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î. –Ø–∫—â–æ –Ω—ñ ‚Äì —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ñ–∞–π–ª"""
        if os.path.exists(self.SETTINGS_FILE):
            try:
                with open(self.SETTINGS_FILE, "r") as file:
                    data = json.load(file)
                    self.volume = data.get("volume", 0.5)  # –Ø–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 50%
                    print(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≥—É—á–Ω—ñ—Å—Ç—å: {self.volume * 100}%")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π...")
            self.save_settings()  # –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ

    def update_slider_position(self):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –≥—É—á–Ω–æ—Å—Ç—ñ"""
        self.slider_x = self.slider_x_start + int(self.volume * self.slider_width)

    def increase_volume(self):
        """–ó–±—ñ–ª—å—à—É—î –≥—É—á–Ω—ñ—Å—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–≤—É–∫"""
        self.volume = min(1.0, self.volume + 0.1)
        self.update_slider_position()
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        if self.sound_loaded:
            pygame.mixer.music.set_volume(self.volume)

    def decrease_volume(self):
        """–ó–º–µ–Ω—à—É—î –≥—É—á–Ω—ñ—Å—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—î –∑–º—ñ–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–≤—É–∫"""
        self.volume = max(0.0, self.volume - 0.1)
        self.update_slider_position()
        self.save_settings()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        if self.sound_loaded:
            pygame.mixer.music.set_volume(self.volume)

    def get_volume(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –≥—É—á–Ω–æ—Å—Ç—ñ"""
        return self.volume

    def toggle_fullscreen(self):
        self.fullscreen = not self.fullscreen

    def settings_menu(self, screen, font, draw_text_with_outline, main_menu):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        audio_button = ImageButton(self.width / 2 - (252 / 2), 400, 252, 74, "", "Assets/Buttons/audio_button.png",
                                   "Assets/Buttons/audio_button_hover.png", "")
        video_button = ImageButton(self.width / 2 - (252 / 2), 500, 252, 74, "", "Assets/Buttons/video_button.png",
                                   "Assets/Buttons/video_button_hover.png", "")
        back_button = ImageButton(self.width / 2 - (252 / 2), 600, 252, 74, "", "Assets/Buttons/exit_button.png",
                                  "Assets/Buttons/exit_button_hover.png", "")

        running = True
        while running:
            # –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ —î
            if self.cap:
                ret, frame = self.cap.read()
                if not ret:
                    self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    continue
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame = cv2.resize(frame, (self.width, self.height))
                frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                screen.blit(frame_surface, (0, 0))

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É "Settings" –∑ –æ–±–≤–µ–¥–µ–Ω–Ω—è–º
            draw_text_with_outline("Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, 330)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                        return
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –º–µ–Ω—é –∞—É–¥—ñ–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                    if audio_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        self.audio_settings(screen, font, draw_text_with_outline, main_menu)
                    # –í–∏—Ö—ñ–¥ –∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                    if back_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return

                # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
                for btn in [audio_button, video_button, back_button]:
                    btn.handle_event(event)
                    if event.type == pygame.MOUSEBUTTONDOWN and btn.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()  # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –º–∏—à—ñ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
            for btn in [audio_button, video_button, back_button]:
                btn.check_hover(pygame.mouse.get_pos())
                btn.draw(screen)

            pygame.display.flip()

    def settings_menu(self, screen, font, draw_text_with_outline, main_menu):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        audio_button = ImageButton(self.width / 2 - (252 / 2), 400, 252, 74, "", "Assets/Buttons/audio_button.png",
                                   "Assets/Buttons/audio_button_hover.png", "")
        video_button = ImageButton(self.width / 2 - (252 / 2), 500, 252, 74, "", "Assets/Buttons/video_button.png",
                                   "Assets/Buttons/video_button_hover.png", "")
        back_button = ImageButton(self.width / 2 - (252 / 2), 600, 252, 74, "", "Assets/Buttons/exit_button.png",
                                  "Assets/Buttons/exit_button_hover.png", "")

        running = True
        while running:
            # –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ —î
            if self.cap:
                ret, frame = self.cap.read()
                if not ret:
                    self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    continue
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame = cv2.resize(frame, (self.width, self.height))
                frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                screen.blit(frame_surface, (0, 0))

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É "Settings" –∑ –æ–±–≤–µ–¥–µ–Ω–Ω—è–º
            draw_text_with_outline("Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, 330)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                        return
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –º–µ–Ω—é –∞—É–¥—ñ–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                    if audio_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        self.audio_settings(screen, font, draw_text_with_outline, main_menu)
                    # –í–∏—Ö—ñ–¥ –∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                    if back_button.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return

                # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
                for btn in [audio_button, video_button, back_button]:
                    btn.handle_event(event)
                    if event.type == pygame.MOUSEBUTTONDOWN and btn.rect.collidepoint(event.pos):
                        if self.sound_loaded:
                            pygame.mixer.music.play()  # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –º–∏—à—ñ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
            for btn in [audio_button, video_button, back_button]:
                btn.check_hover(pygame.mouse.get_pos())
                btn.draw(screen)

            pygame.display.flip()

    def audio_settings(self, screen, font, draw_text_with_outline, main_menu):
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –∞—É–¥—ñ–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        back_button = ImageButton(self.width / 2 - (252 / 2), 600, 252, 74, "", "Assets/Buttons/back_button.png",
                                  "Assets/Buttons/back_button_hover.png", "")
        mute_button = ImageButton(self.width / 2 - (252 / 2), 500, 252, 74, "", "Assets/Buttons/mute_button.png",
                                  "Assets/Buttons/mute_button_hover.png", "")
        save_button = ImageButton(self.width / 2 - (252 / 2), 400, 252, 74, "", "Assets/Buttons/save_button.png",
                                  "Assets/Buttons/save_button_hover.png", "")

        running = True
        settings_changed = False  # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
        previous_volume = self.volume  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º
        self.settings_saved = False  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –º–µ–Ω—é

        while running:
            # –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ —î
            if self.cap:
                ret, frame = self.cap.read()
                if not ret:
                    self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    continue
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame = cv2.resize(frame, (self.width, self.height))
                frame_surface = pygame.surfarray.make_surface(frame.swapaxes(0, 1))
                screen.blit(frame_surface, (0, 0))
            else:
                screen.fill((0, 0, 0))

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É "Audio Settings" –∑ –æ–±–≤–µ–¥–µ–Ω–Ω—è–º
            draw_text_with_outline("Audio Settings", font, (255, 255, 255), (0, 0, 0), self.width / 2, 180)

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–º—É–≥–∏ –≥—É—á–Ω–æ—Å—Ç—ñ
            pygame.draw.rect(screen, (255, 255, 255), (self.slider_x_start, 270, self.slider_width, 8))
            pygame.draw.rect(screen, (0, 255, 0), (self.slider_x_start, 270, int(self.volume * self.slider_width), 8))
            pygame.draw.circle(screen, (255, 255, 255), (self.slider_x, 274), 10)

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
            draw_text_with_outline(f"Volume: {int(self.volume * 100)}%", font, (255, 255, 255), (0, 0, 0),
                                   self.width / 2, 330)

            # –ü–ª–∞—à–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            if self.settings_saved and not settings_changed:
                draw_text_with_outline("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", font, (0, 255, 0), (0, 0, 0), self.width / 2, 730)
            elif settings_changed:
                draw_text_with_outline("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", font, (255, 0, 0), (0, 0, 0), self.width / 2, 730)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    pygame.quit()
                    exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        # –Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏–º–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ
                        if settings_changed and not self.settings_saved:
                            self.volume = previous_volume
                            self.update_slider_position()
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(self.volume)
                        running = False
                        return
                    elif event.key == pygame.K_m:  # –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∑–≤—É–∫—É –∫–ª–∞–≤—ñ—à–µ—é M
                        if self.volume > 0.0:
                            self.sound_enabled = False
                            self.volume = 0.0
                            self.slider_x = self.slider_x_start
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(0.0)
                            settings_changed = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏–ª–∏—Å—è
                            self.settings_saved = False

                if event.type == pygame.MOUSEBUTTONDOWN:
                    # –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞
                    if abs(event.pos[0] - self.slider_x) <= 10 and 265 <= event.pos[1] <= 285:
                        self.slider_dragging = True
                    # –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "Mute"
                    elif mute_button.rect.collidepoint(event.pos):
                        if self.volume > 0.0:
                            self.sound_enabled = False
                            self.volume = 0.0
                            self.slider_x = self.slider_x_start
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(0.0)
                            settings_changed = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–º—ñ–Ω—É
                            self.settings_saved = False
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                    # –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "Back"
                    elif back_button.rect.collidepoint(event.pos):
                        # –Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏–º–æ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ
                        if settings_changed and not self.settings_saved:
                            self.volume = previous_volume
                            self.update_slider_position()
                            if self.sound_loaded:
                                pygame.mixer.music.set_volume(self.volume)
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        running = False
                        return
                    # –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "Save"
                    elif save_button.rect.collidepoint(event.pos):
                        self.save_settings()
                        previous_volume = self.volume  # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                        settings_changed = False  # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                        if self.sound_loaded:
                            pygame.mixer.music.play()
                        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

                # –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–∑—É–Ω–∫–∞
                if event.type == pygame.MOUSEBUTTONUP:
                    self.slider_dragging = False

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø–æ–≤–∑—É–Ω–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—ñ
                if event.type == pygame.MOUSEMOTION and self.slider_dragging:
                    self.slider_x = max(self.slider_x_start, min(event.pos[0], self.slider_x_start + self.slider_width))
                    self.volume = (self.slider_x - self.slider_x_start) / self.slider_width
                    if self.sound_loaded:
                        pygame.mixer.music.set_volume(self.volume)
                    settings_changed = True  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–º—ñ–Ω—É –ø—Ä–∏ —Ä—É—Å—ñ –ø–æ–≤–∑—É–Ω–∫–∞
                    self.settings_saved = False

                # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
                back_button.handle_event(event)
                mute_button.handle_event(event)
                save_button.handle_event(event)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –º–∏—à—ñ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
            back_button.check_hover(pygame.mouse.get_pos())
            back_button.draw(screen)
            mute_button.check_hover(pygame.mouse.get_pos())
            mute_button.draw(screen)
            save_button.check_hover(pygame.mouse.get_pos())
            save_button.draw(screen)

            pygame.display.flip()
